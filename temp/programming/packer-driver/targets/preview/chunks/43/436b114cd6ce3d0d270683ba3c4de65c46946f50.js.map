{"version":3,"sources":["file:///D:/Project/cocos/test/assets/script/GameController.ts"],"names":["_decorator","BoxCollider","Camera","Collider","Color","Component","DistanceJoint2D","ERigidBodyType","find","geometry","Graphics","HingeConstraint","Input","Layers","MeshRenderer","Node","PhysicsSystem","PlaneCollider","PointToPointConstraint","Prefab","RigidBody","RigidBody2D","tween","UITransform","Vec2","Vec3","AssetMgr","Mass","ccclass","property","GameController","displayName","dj2d","beRotateObj","scanAngle","_moveDir","distance","forceVec","_curTick","disForceTime","MaxAngle","DOWN_DIR","DROP_DISTANCE","HOLDER_BASE_POS","MAIN_CAMERA_POS","FORCE_CONTAINER_TIME","HOLDER_DIS_POS_Y","isMove","myPosBegin","myTargetPoint","dropRay","floorSpeed","dropVec","_floorNodes","_isCanCreateNext","_failFloor","_failForcePos","_floorContainerGav","_forceContainerTime","_floorContainerForce","_gavVec","_applyLastFloorForce","_connectFloors","_maxContainerRo","_targetContainerRo","_floorOffset","_dropBox","_isUseJerryState","_isRock","_roVec","_preOffSet","start","assetMgr","preLoadBundles","then","createNewBox","bind","staticBody","distance2D","getComponent","myGraph","lineWidth","lineCap","LineCap","ROUND","strokeColor","BLUE","Ray","holder","setPosition","worldCamera","node","floorCollider","floorTemp","material","restitution","sharedMaterial","mainUI","on","EventType","TOUCH_START","onClickMainUI","update","deltaTime","cord","applyForce","cordStatic","containerRig","floorContainer","ro","Math","abs","eulerAngles","z","getLinearVelocity","x","linearDamping","onCheckHitFunc","mask","maxDistance","queryTrigger","instance","raycast","raycastResults","forEach","rayRes","collider","uuid","hitArea","hitPoint","createFloor","pos","speed","getRes","data","initFloor","floor","obj","instantiate","push","setWorldPosition","setParent","rig","setLinearVelocity","y","mesh","modelCenter","model","modelBounds","halfExtents","boxH","boxWHalf","sqrt","dropScan","once","onCollision","frozenFloor","rightBody","type","STATIC","linearFactor","ZERO","angularFactor","connectFloor","preFoor","ppc","addComponent","useGravity","connectedBody","pivotA","worldPosition","removeFloor","removeInstant","index","indexOf","splice","event","lenFloor","length","lastFloor","preFloor","forceDir","dis","console","log","offset","isTrigger","offAngle","forcePos","angle","mt","friction","rollingFriction","spinningFriction","scheduleOnce","focuseLastFloorPos","position","center","rotation","checkIsPerfactPos","lastPos","rockReduce","rockHandler","enabled","matchX","targetX","wolrdPos","getWorldPosition","to","hitPos","createFloorBox","box","mass","crane","layer","Enum","UI_3D","floorBornPos","hc","centerB","size","pivotB","dropFloor","destroy","cordCamera","worldToScreen","screenPointToRay","strResult","rockAdd","floorRockRate","floorRockForce","reduceRate","floorRockDamping"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider, BoxCollider2D, Camera, Canvas, cclegacy, Collider, Color, Component, director, DistanceJoint2D, EColliderType, ERigidBody2DType, ERigidBodyType, find, geometry, Graphics, HingeConstraint, HingeJoint2D, ICollisionEvent, Input, instantiate, Layers, MeshRenderer, Node, PhysicsSystem, PlaneCollider, PointToPointConstraint, Prefab, Quat, resources, RigidBody, RigidBody2D, Size, Sprite, tween, Tween, UITransform, Vec2, Vec3 } from 'cc';\r\nimport { AssetMgr } from './AssetMgr';\r\nimport { Mass } from './Mass';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(AssetMgr)\r\n    public assetMgr: AssetMgr;\r\n    @property(RigidBody2D)\r\n    public baseBox: RigidBody2D;\r\n    @property(RigidBody2D)\r\n    public staticBody: RigidBody2D;\r\n    @property(RigidBody)\r\n    public cordStatic: RigidBody;\r\n    @property(RigidBody)\r\n    public cord: RigidBody;\r\n    @property(Graphics)\r\n    public myGraph: Graphics;\r\n    @property(Graphics)\r\n    public uiGraph: Graphics;\r\n    @property(Node)\r\n    public mainUI: Node;\r\n    @property(Camera)\r\n    public worldCamera: Camera;\r\n    @property(Camera)\r\n    public uiCamera: Camera;\r\n    @property(Camera)\r\n    public cordCamera: Camera;\r\n    @property(UITransform)\r\n    public uiTransform: UITransform;\r\n    @property(Node)\r\n    public holder: Node;\r\n    @property(Node)\r\n    public hitArea: Node;\r\n    @property(Node)\r\n    public floorTemp: Node;\r\n    @property(Node)\r\n    public testNode: Node;\r\n    @property(Node)\r\n    public firstFloor: Node;\r\n    @property(Node)\r\n    public floorStatic: Node;\r\n    @property(Node)\r\n    public floorContainer: Node;\r\n    @property(Node)\r\n    public floorBornPos: Node;\r\n    @property({ displayName: \"命中衰减振幅系数\" })\r\n    /**命中衰减振幅系数 */\r\n    public reduceRate = 0.1;\r\n    @property({ displayName: \"楼层高度振幅系数\" })\r\n    /**楼层高度振幅系数 */\r\n    public floorRockRate = 0.2;\r\n    @property({ displayName: \"振幅衰减阻尼系数\" })\r\n    /**振幅衰减阻尼系数 */\r\n    public floorRockDamping = 0.5;\r\n    /**振幅系数 */\r\n    @property({ displayName: \"振幅系数\" })\r\n    public floorRockForce = 1;\r\n    @property({ displayName: \"命中准确系数\" })\r\n    /**命中准确系数 */\r\n    public dropScan = 1.0;\r\n    protected dj2d: DistanceJoint2D;\r\n    protected beRotateObj: RigidBody2D\r\n    private scanAngle: Vec3;\r\n    private _moveDir: number = 50;\r\n    private readonly distance = 300;\r\n    // private localCenter: Vec2;\r\n    private forceVec: Vec2;\r\n    private _curTick = 0;\r\n    private readonly disForceTime = 2;\r\n    private readonly MaxAngle = 30;\r\n    private readonly DOWN_DIR = new Vec3(0, -1, 0)\r\n    /**掉落判断偏移值 */\r\n    private DROP_DISTANCE: number;\r\n    private readonly HOLDER_BASE_POS = new Vec3(0, 700, 0)\r\n    private readonly MAIN_CAMERA_POS = new Vec3(0, 3, 10)\r\n    private readonly FORCE_CONTAINER_TIME = 1;\r\n    // public MAX_DISTANCE: number;\r\n    private HOLDER_DIS_POS_Y: number;\r\n    private isMove = false;\r\n    private myPosBegin: Vec3;\r\n    private myTargetPoint: Vec3;\r\n    private dropRay: geometry.Ray\r\n    private floorSpeed: Vec3;\r\n    private dropVec: Vec3;\r\n    private _floorNodes: Node[];\r\n    private _isCanCreateNext: boolean = true;\r\n    private _failFloor: RigidBody;\r\n    private _failForcePos: Vec3;\r\n    private _floorContainerGav = new Vec3(0, 20, 0)\r\n    private _forceContainerTime = 0;\r\n    private _floorContainerForce = new Vec3(1, 0, 0)\r\n    private _gavVec = new Vec3(0, -10, 0)\r\n    private _applyLastFloorForce = new Vec3(0.2, 0, 0)\r\n    private _connectFloors: RigidBody[] = [];\r\n    private _maxContainerRo: number = 0;\r\n    private _targetContainerRo = 0;\r\n    private _floorOffset = 0;\r\n    private _dropBox: RigidBody;\r\n    private _isUseJerryState: boolean;\r\n    private _isRock: boolean = true;//是否摇晃\r\n    private _roVec: Vec3;\r\n    start() {\r\n        this.assetMgr.preLoadBundles().then(this.createNewBox.bind(this));\r\n        // PhysicsSystem.instance.restitution=\r\n        if (this.staticBody) {\r\n            var distance2D = this.staticBody.getComponent(DistanceJoint2D)\r\n            this.dj2d = distance2D;\r\n            this.forceVec = new Vec2(this._moveDir, 0);\r\n            this.myGraph.lineWidth = 10;\r\n            this.myGraph.lineCap = Graphics.LineCap.ROUND;\r\n            this.myGraph.strokeColor = Color.BLUE;\r\n            this.myPosBegin = new Vec3();\r\n            this.myTargetPoint = new Vec3();\r\n            this.dropRay = new geometry.Ray\r\n            this._floorNodes = [];\r\n            this.holder.setPosition(this.HOLDER_BASE_POS);\r\n            this.worldCamera.node.setPosition(this.MAIN_CAMERA_POS)\r\n            var floorCollider = this.floorTemp.getComponent(PlaneCollider)\r\n            floorCollider.material.restitution = 0;\r\n            floorCollider.sharedMaterial.restitution = 0;\r\n            this.floorSpeed = new Vec3();\r\n            this.dropVec = new Vec3();\r\n            this._roVec = new Vec3();\r\n            // this.floorContainer.getComponent(RigidBody).applyLocalTorque(new Vec3(0, 0, 100))\r\n            // let tweenDuration: number = 2.0;\r\n            // let angle = 2;\r\n\r\n\r\n            // let embedTween = tween(this.floorTemp).to(tweenDuration, { eulerAngles: new Vec3(0, 0, angle * 2) }, { easing: \"cubicOut\" }).to(tweenDuration, { eulerAngles: new Vec3(0, 0, -angle * 2) }, { easing: \"cubicOut\" }).union();\r\n\r\n\r\n\r\n            // tween(this.floorTemp).to(tweenDuration / 2, { eulerAngles: new Vec3(0, 0, -angle) }, { easing: \"cubicOut\" }).call(() => {\r\n            //     embedTween.repeatForever().start();\r\n            // }).start();\r\n        }\r\n        this.mainUI.on(Input.EventType.TOUCH_START, this.onClickMainUI, this)\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n\r\n\r\n\r\n        this._curTick += deltaTime;\r\n\r\n        if (!this.isMove) {\r\n            this.cord.applyForce(new Vec3(5, 0, 0));\r\n            // this.baseBox.applyForceToCenter(this.forceVec, true);\r\n            if (this._curTick > this.disForceTime) {\r\n\r\n                this.isMove = true;\r\n            }\r\n        }\r\n\r\n        if (this.cordStatic) {\r\n\r\n        }\r\n        if (this._failFloor) {\r\n\r\n            // this._failFloor.applyForce(this._failForcePos)\r\n        }\r\n        this._forceContainerTime += deltaTime\r\n        let containerRig = this.floorContainer.getComponent(RigidBody);\r\n        if (this._isRock && this._floorOffset > 0 && this._forceContainerTime < this.FORCE_CONTAINER_TIME) {\r\n\r\n            containerRig.applyForce(this._floorContainerForce)\r\n        }\r\n        if (this._isRock) {\r\n            containerRig.applyForce(this._floorContainerGav)\r\n        }\r\n\r\n        let ro = Math.abs(this.floorContainer.eulerAngles.z);\r\n\r\n        containerRig.getLinearVelocity(this._roVec)\r\n        if (Math.abs(this._roVec.x) <= 0.01) {\r\n            this._maxContainerRo = ro;\r\n        }\r\n        if (this._maxContainerRo <= this._targetContainerRo && this._targetContainerRo > 0) {\r\n            containerRig.linearDamping = 0;\r\n        }\r\n\r\n\r\n    }\r\n    onCheckHitFunc() {\r\n        const mask = 0xffffffff;\r\n        const maxDistance = 10000000;\r\n        const queryTrigger = true;\r\n\r\n        if (PhysicsSystem.instance.raycast(this.dropRay)) {\r\n            const raycastResults = PhysicsSystem.instance.raycastResults;\r\n            raycastResults.forEach(rayRes => {\r\n                const collider = rayRes.collider;\r\n                if (raycastResults && collider.node.uuid == this.hitArea.uuid) {\r\n                    const hitPoint = rayRes.hitPoint\r\n                    this.createFloor(hitPoint, this.floorSpeed)\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n    createFloor(pos: Vec3, speed: Vec3) {\r\n        this.assetMgr.getRes(\"BoxFloor\", Prefab, \"components\").then(data => {\r\n            this.initFloor(data, pos, speed)\r\n        })\r\n    }\r\n    initFloor(floor: Prefab, pos: Vec3, speed: Vec3) {\r\n        if (floor) {\r\n            var obj = this.assetMgr.instantiate(floor);\r\n            this._floorNodes.push(obj);\r\n            obj.setWorldPosition(pos);\r\n            obj.setParent(this.floorContainer, true)\r\n            // rightBody.node.setParent(this.floorContainer, true)\r\n            var rig = obj.getComponent(RigidBody)\r\n            rig.setLinearVelocity(new Vec3(speed.x / 7, speed.y, 0))\r\n            if (!this.DROP_DISTANCE) {\r\n                var mesh = obj.getComponent(MeshRenderer)\r\n                var modelCenter = mesh.model.modelBounds.halfExtents;\r\n                var boxH = modelCenter.y * 2;\r\n                var boxWHalf = modelCenter.x;\r\n                this.DROP_DISTANCE = Math.sqrt(boxH * boxH + boxWHalf * boxWHalf) * this.dropScan\r\n            }\r\n            let collider = obj.getComponent(Collider);\r\n            // 监听触发事件\r\n            // this.scheduleOnce(() => {\r\n            collider.once(\"onCollisionEnter\", this.onCollision, this);\r\n            // }, 0.1)\r\n        }\r\n\r\n    }\r\n\r\n    /**固定楼层 */\r\n    private frozenFloor(rightBody: RigidBody): void {\r\n\r\n        rightBody.type = ERigidBodyType.STATIC;\r\n        rightBody.linearFactor = Vec3.ZERO\r\n        rightBody.angularFactor = Vec3.ZERO\r\n\r\n        // this.scheduleOnce(() => {\r\n\r\n\r\n        // }, 2)\r\n    }\r\n    private connectFloor(floor: Node, preFoor: Node): void {\r\n        var ppc = preFoor.addComponent(PointToPointConstraint)\r\n        var rig = floor.getComponent(RigidBody);\r\n        rig.useGravity = false;\r\n        ppc.connectedBody = rig\r\n        ppc.pivotA = new Vec3(floor.worldPosition.x - preFoor.worldPosition.x, 1, 0)\r\n        this._connectFloors.push(rig)\r\n    }\r\n    removeFloor(floor: Node) {\r\n        this.assetMgr.removeInstant(floor)\r\n        var index = this._floorNodes.indexOf(floor)\r\n        this._floorNodes.splice(index, 1)\r\n    }\r\n    onCollision(event: ICollisionEvent) {\r\n        var lenFloor = this._floorNodes.length\r\n        if (lenFloor > 0) {\r\n            var lastFloor = this._floorNodes[lenFloor - 1];\r\n\r\n            var rightBody = lastFloor.getComponent(RigidBody);\r\n\r\n            if (lenFloor > 1) {\r\n                var preFloor = this._floorNodes[lenFloor - 2];\r\n                var forceDir = lastFloor.worldPosition.x - preFloor.worldPosition.x;\r\n\r\n                var dis = Vec3.distance(preFloor.worldPosition, lastFloor.worldPosition)//Math.abs(preFloor.worldPosition.x - lastFloor.worldPosition.x);\r\n\r\n                if (forceDir > 0) {\r\n\r\n                    this._applyLastFloorForce.x = -dis;\r\n                } else {\r\n\r\n                    this._applyLastFloorForce.x = dis;\r\n                }\r\n\r\n                console.log(\"距离：\" + dis + \",最大距离差：\" + this.DROP_DISTANCE)\r\n                var offset = dis - this.DROP_DISTANCE\r\n                if (offset >= 0) {\r\n                    lastFloor.getComponent(Collider).isTrigger = true;\r\n                    rightBody.angularFactor = Vec3.ZERO\r\n                    var offAngle = (10.0 + (offset / this.DROP_DISTANCE) * 35);\r\n                    // rightBody.linearFactor = Vec3.ONE\r\n                    var forcePos = new Vec3(0, 0, 0);\r\n                    if (preFloor.worldPosition.x < lastFloor.worldPosition.x) {\r\n                        lastFloor.angle = -offAngle;\r\n                        rightBody.setLinearVelocity(new Vec3(1, -2, 2))\r\n                        // Vec3.multiplyScalar(rightBody.linearFactor, Vec3.UNIT_X, 50);\r\n                        forcePos.x = 10;\r\n                        console.log(\"往右掉下来\")\r\n                    } else {\r\n                        forcePos.x = -10;\r\n                        lastFloor.angle = offAngle\r\n                        rightBody.setLinearVelocity(new Vec3(-1, -2, 2))\r\n                        // Vec3.multiplyScalar(rightBody.linearFactor, Vec3.UNIT_X, -50);\r\n                        console.log(\"往左掉下来\")\r\n                    }\r\n                    this._failForcePos = forcePos;\r\n                    this._failFloor = rightBody;\r\n                    var mt = rightBody.getComponent(Collider).material;\r\n                    mt.friction = 0;\r\n                    mt.restitution = 0.1;\r\n                    mt.rollingFriction = 0;\r\n                    mt.spinningFriction = 0.5;\r\n                    this.scheduleOnce(() => {\r\n                        this.removeFloor(lastFloor)\r\n                        this.createNewBox();\r\n                        this._failFloor = null;\r\n                    }, 2)\r\n                } else {\r\n\r\n                    this.focuseLastFloorPos(lastFloor)\r\n\r\n                    this.frozenFloor(rightBody)\r\n                    var pos = lastFloor.position;\r\n                    //防止碰撞检测延时所以固定了Y\r\n                    lastFloor.setPosition(pos.x, preFloor.position.y + preFloor.getComponent(Collider).center.y * 2, pos.z)\r\n                    lastFloor.rotation = preFloor.rotation;\r\n\r\n                    if (this.checkIsPerfactPos(lastFloor.position.x, preFloor.position.x)) {//完美命中\r\n                        var lastPos = lastFloor.position;\r\n                        lastFloor.setPosition(preFloor.position.x, lastPos.y, lastPos.z)\r\n                        this.rockReduce();\r\n                        console.log(\"完美命中\")\r\n                    } else {\r\n                        console.log(\"命中\")\r\n                        if (lenFloor > 3) {\r\n                            this.rockHandler(forceDir);\r\n\r\n                        } else {\r\n                            this._floorOffset += forceDir;\r\n                        }\r\n                    }\r\n                    if (lenFloor > 3 && this._isUseJerryState) {\r\n                        lastFloor.getComponent(Mass).enabled = true;\r\n                        this._floorNodes[lenFloor - 4].getComponent(Mass).enabled = false;\r\n                    }\r\n                }\r\n            } else {\r\n                this.focuseLastFloorPos(lastFloor)\r\n                this.frozenFloor(rightBody)\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIsPerfactPos(matchX: number, targetX: number) {\r\n        return Math.abs(matchX - targetX) < 0.05\r\n    }\r\n    /**相机跟踪最后一块楼层 */\r\n    focuseLastFloorPos(floor: Node) {\r\n        var wolrdPos = floor.getWorldPosition();\r\n        wolrdPos.x = this.MAIN_CAMERA_POS.x;\r\n        wolrdPos.z = this.MAIN_CAMERA_POS.z;\r\n        wolrdPos.y += 1.8;\r\n        // this.worldCamera.node.setWorldPosition(wolrdPos)\r\n        tween(this.worldCamera.node).to(0.2, { worldPosition: wolrdPos }).start();\r\n        var hitPos = this.hitArea.getWorldPosition();\r\n        hitPos.y = wolrdPos.y - 3\r\n        this.hitArea.setWorldPosition(hitPos)\r\n\r\n        this.createNewBox();\r\n\r\n    }\r\n    createNewBox() {\r\n        // this.assetMgr.getRes(\"BaseBox\", Prefab, \"components\").then(data => { this.createBox(data) })\r\n        this.assetMgr.getRes(\"BoxFloor\", Prefab, \"components\").then(data => { this.createFloorBox(data) })\r\n    }\r\n    createFloorBox(box: Prefab) {\r\n        if (box) {\r\n            var obj = this.assetMgr.instantiate(box);\r\n            if (obj) {\r\n\r\n                var rig = obj.getComponent(RigidBody);\r\n                rig.angularFactor = Vec3.ZERO;\r\n                rig.mass = 0.0;\r\n                this._dropBox = rig;\r\n                var crane = find(\"crane\")\r\n                if (crane) {\r\n                    obj.setParent(crane)\r\n                    obj.layer = Layers.Enum.UI_3D;\r\n\r\n                }\r\n\r\n                obj.setWorldPosition(this.floorBornPos.worldPosition)\r\n\r\n                var hc = this.cord.addComponent(HingeConstraint)\r\n                hc.pivotA = new Vec3(0, -0.5, 0);\r\n                var collider = obj.getComponent(BoxCollider);\r\n                var centerB = collider.size\r\n                hc.pivotB = new Vec3(0, centerB.y, 0);\r\n\r\n                hc.connectedBody = rig\r\n\r\n                // this.isMove = false;\r\n                this._curTick = 0;\r\n                this._isCanCreateNext = true;\r\n                // boxRight2d.wakeUp();\r\n            }\r\n        }\r\n    }\r\n\r\n    onClickMainUI() {\r\n        console.log(\"点击了\")\r\n\r\n        if (this._isCanCreateNext) {\r\n            var dropFloor = this._dropBox.node\r\n            if (dropFloor) {\r\n\r\n                var hc = this.cord.getComponent(HingeConstraint)\r\n                hc.destroy();\r\n\r\n                this._dropBox.getLinearVelocity(this.floorSpeed)\r\n                this.assetMgr.removeInstant(dropFloor);\r\n                this.floorSpeed.x *= 3\r\n                this.floorSpeed.y = -5;\r\n\r\n                this.dropVec = this.cordCamera.worldToScreen(dropFloor.worldPosition)\r\n\r\n                this.worldCamera.screenPointToRay(this.dropVec.x, this.dropVec.y, this.dropRay)\r\n                this.onCheckHitFunc();\r\n            }\r\n        }\r\n    }\r\n    private _preOffSet = 0;\r\n    /**根据偏移值进行处理摇摆效果 */\r\n    rockHandler(offset: number) {\r\n        this._floorOffset += offset;\r\n        var strResult = \"\"\r\n        if (Math.abs(this._preOffSet) < Math.abs(offset) || this._targetContainerRo == 0) {\r\n            this.rockAdd(offset);\r\n            strResult = \"加角度\"\r\n        } else {\r\n            this.rockReduce();\r\n            strResult = \"减角度\"\r\n        }\r\n        this._preOffSet = offset;\r\n        console.log(strResult + \"，Maxrotation：\" + this._maxContainerRo + \",目标角度：\" + this._targetContainerRo + \"偏移值：\" + this._floorOffset);\r\n    }\r\n    rockAdd(offset: number) {\r\n        var rig = this.floorContainer.getComponent(RigidBody)\r\n        this._floorContainerForce.x = offset * (1 / (this._floorNodes.length * this.floorRockRate)) * this.floorRockForce\r\n        this._forceContainerTime = 0;\r\n        rig.linearDamping = 0;\r\n    }\r\n    rockReduce() {\r\n        var rig = this.floorContainer.getComponent(RigidBody)\r\n        let reduceRate = 1 - this.reduceRate\r\n        this._targetContainerRo = this._maxContainerRo * reduceRate\r\n        rig.linearDamping = this.floorRockDamping;\r\n    }\r\n}\r\n\r\n"]}